# -*- coding: utf-8 -*-
"""UAS-AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pyzQfhX7MpFbNOQ4rYV6MnTvymzL_E5X

## Import Data
"""
#Kelompok 14 TI J 23
#Nur Lintang Enjang Kinasih
#Khalifatun Naufal

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

df = pd.read_excel (r"C:\Users\MyBook Z Series\Documents\문서\KAMPUS\SEMESTER 3\Kecerdasan Buatan\DATA dan KODE\DATAuntukKODE.xlsx") #mohon maaf pak, kami menggunakan path lengkap, karena sering error jika langsung path file saja
df

"""##1. Data Understanding"""

file_path = r'C:\Users\MyBook Z Series\Documents\문서\KAMPUS\SEMESTER 3\Kecerdasan Buatan\DATA dan KODE\DATAuntukKODE.xlsx'
df = pd.read_excel(file_path)
print("Data Shape : ", df.shape)

df.info()

df[['age','sex','cp','trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']].describe()

df.target.value_counts()

"""##2. Cleaning Data

"""

df.isnull().sum()

df.duplicated().sum()
df = df.drop_duplicates()
print(df)

"""##3. Exploratory Data Analysis (EDA)"""

plt.figure(figsize=(6, 4))
sns.histplot(data=df, x='age', bins=10, kde=True, color='#6A1E55')

plt.title('Distribusi Umur')
plt.xlabel('Umur')
plt.ylabel('Frekuensi')
plt.show()

sns.set_palette('deep')
df['target'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Heart Disease vs Healthy')
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='target', palette='crest')

plt.title('Distribusi Hasil Diagnosis')
plt.xlabel('Hasil')
plt.ylabel('Frekuensi')
plt.show()

df.corr()

plt.figure(figsize=(6, 4))
sns.heatmap(df.corr(), cmap='YlOrRd')

"""##4. Preparation Data"""

X = df.drop(columns=['target'])
y = df['target']

print("X : ", X.shape)
print("Y : ", y.shape)

scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""##5. Modeling & Evaluation"""

clf = SVC(kernel='rbf')
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
clf_acc = accuracy_score(y_pred, y_test)

print(classification_report(y_test, y_pred))
print("AKURASI SVM : {:.2f}%".format(clf_acc*100))

conf_matrix = confusion_matrix(y_test, y_pred)

# Tampilkan Confusion Matrix
print("\nConfusion Matrix:")
print(conf_matrix)
print(f"  True Negative (Healthy correctly predicted as Healthy): {conf_matrix[0][0]}")
print(f"  False Positive (Healthy predicted as Heart Disease): {conf_matrix[0][1]}")
print(f"  False Negative (Heart Disease predicted as Healthy): {conf_matrix[1][0]}")
print(f"  True Positive (Heart Disease correctly predicted as Heart Disease): {conf_matrix[1][1]}\n")

# Visualisasikan Confusion Matrix dengan Heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title("Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()

"""## 6. Testing"""

new_data = {'age': [15],
            'sex': [0],
            'cp': [2],
            'trestbps': [120],
            'chol': [150],
            'fbs': [0],
            'restecg': [1],
            'thalach': [170],
            'exang': [0],
            'oldpeak': [2.1],
            'slope': [1],
            'ca': [0],
            'thal': [1]}

new_data = pd.DataFrame(new_data)
new_data

scaled_new_data = scaler.transform(new_data)
y_pred_new = clf.predict(scaled_new_data)

print("Diagnosis Data Baru : ", y_pred_new)